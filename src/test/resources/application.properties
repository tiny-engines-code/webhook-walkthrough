info.app.name=deliversendgrid
info.app.team=CDS
info.app.environment=production
info.app.version=${releaseVersion}
info.app.platform=v2
application.parallel.pipe.number=pipe2

subscriber.queueUrl=https://sqs.us-east-1.amazonaws.com/751689567599/cds-test


# Logging properties
spring.main.bannerMode=off

# Service properties
spring.application.name=determinetarget
spring.mvc.throw-exception-if-no-handler-found=true
spring.resources.add-mappings=false

server.port=8080
management.server.port=8077
server.servlet.contextPath=/

cloud.aws.region.static=us-east-1
cloud.aws.stack.auto=false
cloud.aws.credentials.instanceProfile=true


management.endpoints.web.base-path=/
management.endpoints.web.exposure.include=info,health,signalfx

# ====== Wingtips config - the properties below are used by WingtipsSpringBootProperties ======

# The default SpanLoggingRepresentation that should be used for serializing distributed tracing spans.
#   You can choose from KEY_VALUE and JSON. KEY_VALUE is *highly* recommended for Splunk performance and ease of use.
wingtips.spanLoggingFormat=KEY_VALUE

# The set of (comma delimited) header names that represent a "user ID" for the purposes of auto-populating the
#   userId field when distributed tracing spans are logged.
wingtips.userIdHeaderKeys=USERID,UPMID


# ====== Backstopper config - the properties below are used by CommerceBackstopperSpringBootProperties ======

# Set this to true to enable legacy Spindle contract support. This results in IllegalArgumentExceptions mapping to
#   HTTP status 400. Normal/recommended behavior is for Backstopper to ignore IllegalArgumentExceptions, resulting
#   in them mapping to HTTP status 500.
# NOTE: It's recommended that you leave this false/blank/missing so that IllegalArgumentExceptions map to
#   HTTP status 500, because IllegalArgumentExceptions are commonly used outside client validation code (transportercore JDK,
#   third party libraries, service-level code, etc) and auto-mapping them to 400s is often incorrect.
#   You may need to set this to true if you're adding Backstopper to an existing Spindle project where the
#   IllegalArgumentException->400 mapping behavior is currently being relied on.
backstopper.nike-commerce.spindle-legacy-contract-support-enabled=false

# Set this to true to allow non-Backstopper Spring exception handlers to execute and potentially handle exceptions
#   instead of Backstopper (i.e. @ExceptionHandler(SomeExceptionClass.class)). If set to true then Backstopper will
#   still handle exceptions that it explicitly knows how to handle, but exceptions that Backstopper doesn't know about
#   will then run through the Spring exception handlers before finally falling to the Backstopper catch-all.
#   If this is left false/blank/missing then Backstopper will handle all exceptions and Spring exception handlers will
#   not execute.
# NOTE: It's recommended that you leave this false/blank/missing so that Backstopper will handle all exceptions as
#   this is how Backstopper can guarantee no accidental information leaks, ensure consistent error contracts, etc.
#   You may need to set this to true if you're adding Backstopper to an existing Spindle project that has heavy use
#   of custom exception handlers. In that case it's still recommended that you move to a full Backstopper solution that
#   doesn't require Spring exception handlers, but this can be a useful stopgap in the meantime.
backstopper.nike-commerce.allow-non-backstopper-spring-exception-handlers=false

# ====== Metrics config ======
# For SignalFx Metrics configuration options see the README here:
# https://bitbucket.nike.com/projects/COPBLUE/repos/nike-signalfx-lib-java/browse/sfx-spring-boot-metrics

# Register JVM metrics (helpful on systems that don't have the collectd JMX plugin enabled)
nike.signalfx.registry.registerJvmMetrics=true

//CerberusPaths
cerberus.region=us-west-2
cerberus.config: app/determinetarget/config
cerberus.auth: app/determinetarget/auth
cerberus.initialDelay=1000
cerberus.scheduleInterval=300000

################## notification-stream-sqs settings ######################
# application name to start the span for wingTip
subscriber.applicationName=determinetarget
# Number of Threads to process the messages
# If Thread count=20 CPU utilization max reaches 93%. With thread count=15 CPU utilization max reaches 66%
# With thread count=16, CPU reaches max 70 to 71%. With this thread count, we are able to process 1350 users per sec max
subscriber.processingThreadCount=1
#subscriber.processingThreadCount=16
# For message retry pattern visit https://confluence.nike.com/display/ICP/Notification-Stream-Sqs
# initial wait time
subscriber.backoffInitialDelayInSeconds=30
# maximum wait time for a message across all retries
subscriber.backoffMaxDelayInSeconds=7200
# sqs message retention
subscriber.sqsMessageRetentionInSeconds=93600
#max retries before message is deleted from queue
subscriber.message.maxRetriesAllowed=21
# sleep if we didn't receive any messages from queue
subscriber.idleSleepBetweenPollsInMills=250
# this enable long polling, wait for 5 sec to receive the messages from queue
subscriber.waitTimeSeconds=16

########################## sqs client settings #############################
sqs.connection.timeout.millis=2000
sqs.socket.timeout.millis=22000
# This values always > 2 * processingThreadCount, as subscriber and publisher using same sqs.
sqs.max.sockets=100


